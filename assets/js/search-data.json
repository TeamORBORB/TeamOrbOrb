{
  
    
        "post0": {
            "title": "Unit 3 Sections 8 and 10 Graded Hacks",
            "content": ". .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/grades/hacks/2023/02/19/Hacks-Grades.html",
            "relUrl": "/grades/hacks/2023/02/19/Hacks-Grades.html",
            "date": " • Feb 19, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Flask/Python Deployment Guide",
            "content": "Server Setup and Initial Deployment . Development Operations (DevOps) begins with server setup. . Amazon Web Services (AWS): Electric Cloud Compute (EC2) Setup . To begin, head to the “Instances” dropdown on AWS and select “Instances.” | . &lt;/img&gt; . From here, a variety of instances will show up. For this project, depending on which teacher you have, select either “NCS.cf Yeung CSP” or “NCS.gq Mort CSP” | . &lt;/img&gt; . Then, run $ sudo docker ps # This allows you to observe the ports that are currently being used . | . docker-compose.yml &amp; Dockerfile . Next, head to VSCode on your local machine and update the docker-compose.yml and Docker files. | Select a port that is not used and change the left side of docker-compose.yml port to be an unussed port XYZ:8086. The “XYZ” would be the port that you have selected. | The right side 8086 matches the port you have used in your Docker file in two locations - 8080 is typically used as an internal port. . | In VSCode, open up your terminal. Run sudo docker-compose up and make sure it builds properly. Type localhost:XYZ in your browser (XYZ is the unused port you have selected). Check for any errors occur in the Terminal. If this fails, please be sure to review the previous steps. | If all is well, make sure to commit your changes to docker-compose.yml &amp; Dockerfile | . Clone and Change Directory to project location . This command allows you to clone your GitHub repository onto the AWS instance. In this example, the GitHub HTTPs link is: https://github.com/nighthawkcoders/flask_portfolio.git. . Head back to either the instance “NCS.cf Yeung CSP” or “NCS.gq Mort CSP” on AWS | . Note . Your repository should be using the APCSP flask_portfolio as a template . Once you are in the instance, run | . ls # Check the other repository names, make sure that the one the name you select does not match the ones that appear when running this command . Next, run | . $ cd $ git clone https://github.com/nighthawkcoders/flask_portfolio.git my-unique-name # Replace &quot;my-unique-name- with your desired name for this repository, it is recommended that your table number and period are featured in this name to avoid confusion among groups $ cd my-unique-name . Once you are in your repository, run | . docker-compose up -d --build . To make sure that your application is running, run the following command | . curl localhost:XYZ # Replace XYZ with the port you have selected . Test preparation for Docker Web Application using IP for Internet Access . Each student scrum team will perform Nginx test and verify Group Web Project is working on EC2 instance. This step is can only support a single Web Application at a time. . This Step is dependent on… . EC2 Public IPs: 3.233.212.71 | Docker Port: 8086 | . Enable Nginx to retrieve default Web Application using IP Address from internet request (Reverse Proxy)! . Install Nginx on Ubuntu servers $ sudo apt install nginx . | Go to location of Nginx server configuration files $ cd /etc/nginx/sites-available . | Open editor to Create your own “Nginx test configuration”. $ sudo nano my-unique-file # Replace &quot;my-unique-file&quot; with the name you wish to call your nginx file . | Edit your own Nginx server configuration making modifications to: IP Address: 3.233.212.71 | docker-compose, proxy pass Port: 8086 | . | . Requirements . A unique name for your file | DNS name for server Link to Jeffery F’s DNS Domain Guide . | Change the port in proxy_pass line to the one you have previously selected | . server { listen 80; listen [::]:80; server_name 3.233.212.71; location / { proxy_pass http://localhost:8086; # Simple requests if ($request_method ~* &quot;(GET|POST)&quot;) { add_header &quot;Access-Control-Allow-Origin&quot; *; } # Preflight requests if ($request_method = OPTIONS ) { add_header &quot;Access-Control-Allow-Origin&quot; *; add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS, HEAD&quot;; add_header &quot;Access-Control-Allow-Headers&quot; &quot;Authorization, Origin, X-Requested-With, Content-Type, Accept&quot;; return 200; } } } . Activating Nginx configuration . Activate/enabled Nginx server configuration: nginx configuration file: test $ sudo ln -s /etc/nginx/sites-available/my-unique-file /etc/nginx/sites-enabled # Replace &quot;my-unique-file&quot; with the name of your nginx file $ sudo nginx -t . | . | If there are errors, something is wrong… Perhaps you are missing semicolon at the end of server)name or proxy_pass lines. | Perhaps link to file in sites-enabled is bad as a result of bad syntax in ln -a command. There are two directories /etc/nginx/sites-available and /etc/nginx/sites-enabled. | The 1st is for preliminary editing, the second is for activation. Perform ls in /etc/nginx/sites-enabled and make sure all the names look correct. | Correct by rm of mistake in /etc/nginx/sites-enabled without deleting original file in /etc/nginx/sites-available. Then repeat ln -s command. | . | . | If there are no errors, restart NGINX so the server to activate /etc/nginx/sites-enabled files: $ sudo systemctl restart nginx . | Check that your server is running on the browser using the domain using http://mydomain | Replace “mydomain” with the domain you have previously selected | . Final preparation the Docker Web Application using DNS for Internet Access . There are additional steps to this preparation. We need to direct the internet to the AWS server running the Web Application, this is done using Domain Name Service (DNS). After being directed to the Web Server, the server needs to respond to the HTTP (Hyper Text Transfer Protocol) request. The proxy of HTTP to your Web Application is manged by Nginx. Finally, we will Secure HTTP (HTTPS), with a utility called Certbot. . Certbot configuration . Each student scrum team will learn Certbot on on AWS EC2 test server, establish working https web application. The final configuration will be on AWS server managed by Teachers or Student DevOps Engineers. . $ sudo certbot --nginx . Make sure that your domain appears on the list of names to activate HTTPS for | . Saving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator nginx, Installer nginx . Which names would you like to activate HTTPS for? . . 1: coolcodersjava.pw 2: www.coolcodersjava.pw 3: ajarcade.duckdns.org 4: flowhealth.duckdns.org 5: goatedgroup.duckdns.org 6: jasj-inventory.duckdns.org 7: recipies.duckdns.org 8: ssvgcars.duckdns.org 9: userapi.duckdns.org 10: fr0st.ml 11: www.fr0st.ml 12: agenda.nighthawkcodescrums.gq 13: coolcoders.nighthawkcodescrums.gq 14: escaperoom.nighthawkcodescrums.gq 15: frost.nighthawkcodescrums.gq 16: jame.nighthawkcodescrums.gq 17: lawnmowers.nighthawkcodescrums.gq 18: loopholegames.nighthawkcodescrums.gq 19: musicmania.nighthawkcodescrums.gq 20: nba.nighthawkcodescrums.gq 21: sadv.nighthawkcodescrums.gq 22: ssjn.nighthawkcodescrums.gq 23: stocks.nighthawkcodescrums.gq 24: striver.nighthawkcodescrums.gq 25: tngc.nighthawkcodescrums.gq 26: white.nighthawkcodescrums.gq 27: workwatch.nighthawkcodescrums.gq 28: cars.nighthawkcodingsociety.com 29: dolphin.nighthawkcodingsociety.com 30: saakd.nighthawkcodingsociety.com 31: pythonalflask.tk 32: www.pythonalflask.tk 33: teambrobro.tk 34: www.teambrobro.tk 35: teamcheeseatimetime.tk 36: www.teamcheeseatimetime.tk . . Select the appropriate numbers separated by commas and/or spaces, or leave input blank to select all options shown (Enter ‘c’ to cancel): # ENTER YOUR CORRESPONDING NUMBER . Cert not yet due for renewal . You have an existing certificate that has exactly the same domains or certificate name you requested and isn’t close to expiry. (ref: /etc/letsencrypt/renewal/nighthawkcodingsociety.com-0001.conf) . What would you like to do? . . 1: Attempt to reinstall this existing certificate 2: Renew &amp; replace the cert (limit ~5 per 7 days) . . Select the appropriate number [1-2] then [enter] (press ‘c’ to cancel): 2 Renewing an existing certificate Performing the following challenges: http-01 challenge for nighthawkcodingsociety.com http-01 challenge for csa.nighthawkcodingsociety.com http-01 challenge for cso.nighthawkcodingsociety.com http-01 challenge for flm.nighthawkcodingsociety.com Waiting for verification… Cleaning up challenges Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_society Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csa Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csp Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_flm . Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. . . 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you’re confident your site works on HTTPS. You can undo this change by editing your web server’s configuration. . . Select the appropriate number [1-2] then [enter] (press ‘c’ to cancel): 2 Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_society Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csa Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csp Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_flm . . Your existing certificate has been successfully renewed, and the new certificate has been installed. . The new certificate covers the following domains: https://nighthawkcodingsociety.com, https://csa.nighthawkcodingsociety.com, https://csp.nighthawkcodingsociety.com, and https://flm.nighthawkcodingsociety.com, . You should test your configuration at: https://www.ssllabs.com/ssltest/analyze.html?d=nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=csa.nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=csp.nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=flm.nighthawkcodingsociety.com . . IMPORTANT NOTES: . Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/privkey.pem Your cert will expire on 2022-03-06. To obtain a new or tweaked version of this certificate in the future, simply run certbot again with the “certonly” option. To non-interactively renew all of your certificates, run “certbot renew” | If you like Certbot, please consider supporting our work by: . Donating to ISRG / Let’s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le . | Conclude this process by running sudo certbot --nginx and testing https://mydomain | Replace “mydomain” with the domain you have previously selected | . Update Deployment . To update your code, run | . $ sudo docker-compose kill Killing flask_portfolio_web_1 ... done . From here, the server should be down and displaying a 502 error | . $ git pull # This allows you to update your code . Then, rebuild your container by running… | . $ sudo docker-compose build --no-cache . Note . This step can take a few minutes . | Finally, run… . | . $ sudo docker-compose up -d Recreating flask_portfolio_web_1 ... done . If all of the steps have been completed properly, the server should be back up with the applied changes/updates | .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/deploy",
            "relUrl": "/deploy",
            "date": " • Feb 10, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Team View and Frontend",
            "content": "Frontend . Homepage . Link to the finished page . HTML - Homepage . View/Homepage Concept . This concept/demo features our homepage, a simplistic and straightforward design that is pleasing to the eyes | On the top right lies our navigation bar, that displays a variety of pages: Home, About, Inventory, Cart, and Search. | At the moment, all but the home are yet to be completed - though we have started work on each of them...we will go through the other pages later on in this blog | . . . CSS - Homepage . . . . About . About - code behind . Email List . &quot;Usually before I start making a new part of the project or website I draft it out in Canva. Doing this process allows me to only think about the code and not the aesthetics of the website while coding. This week I worked on the emailing list/subscription for users to sign up for with their emails. I also formatted the website from last week and added a new part onto the bottom of the site (index). I also worked on adding the new pages on the website, aka the &#39;about site&#39;. And I also made an &#39;input&#39; part on the site. The input is the email input where users can add in their emails to join the emailing list. The email&#39;s / inputs won&#39;t accepted unless it contains a &#39;@&#39; or isn&#39;t a valid email won&#39;t be inputted. In the future I am planning to add a table which will use the user inputs and make the combine into a table. We also plan on using an API which will automatically used the emails to send an email to all the emails available in the list.&quot; - Luna Iwazaki . Wireframe from canva . . screen shot of the finished page . link to the finished page . code behind the page . . Preloader/Loading screen . The preloader uses a function that displays the given image/gif while the screen loads, using windows.addEventListener for the &quot;load&quot; event. This allows the overall website to be more visually pleasing to users. | This work is strictly in the frontend. | . Load Screen . . Load Screen - Code Behind . HTML . . CSS . . Car Inventory . This code is the Inventory/ catalog. This code displays the different types of cars that we show on our website. There is a hover feature to enable the user to quickly like or view the description of the car. In the future, we will add hyper links to the hover cards to send the user to a full description of the said car. We also have a small “By:” section on the bottom of the card that when clicked, will lead the user to all the cars made by that manufacturer. | As a part of the inventory, our team plans to add a liking/favorite feature as described in our scrum board. In order to save a given user&#39;s likes, it will require communication between both the Front and Backend. The input shall be frontend work, while the data will need to be extracted. We plan to build an API similar to our group&#39;s previous NBA Team Picker API that allowed us to fetch data from our flask website to be able to use for display in the Frontend. | . . Login Screen . Backend . Below is code from the Object Oriented Programming Hacks | This code, though very rough, is a start to what we plan to store as data in the backend | The code consists of getters and setters in order to protect the data for essential car information ie. make, model, year | . import json class Car: def __init__(self, make, model, price, year): # Adding instance attributes self._make = make self._model = model self._price = price self._year = year # Add getters and setters for make, model, price, year @property def make(self): return self._make @make.setter def make(self, make): self._make = make @property def model(self): return self._model @model.setter def model(self, model): self._model = model @property def price(self): return self._price @price.setter def price(self, price): self._price = price @property def year(self): return self._year @year.setter def year(self, year): self._year = year #Calculating Depreciation def calculate_depreciation(self, years): depreciation = 0.9**years * self._price return depreciation @property def dictionary(self): dict = { &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, } return dict def __str__(self): return json.dumps(self.dictionary) if __name__ == &quot;__main__&quot;: car1 = Car(make=&quot;Lexus&quot;, model=&quot;IS 500&quot;, price=&quot;$58,000&quot;, year=&quot;2022&quot;) print(car1) . {&#34;make&#34;: &#34;Lexus&#34;, &#34;model&#34;: &#34;IS 500&#34;, &#34;price&#34;: &#34;$58,000&#34;, &#34;year&#34;: &#34;2022&#34;} .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/project/2023/01/16/View-Frontend.html",
            "relUrl": "/project/2023/01/16/View-Frontend.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statements | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objective: Express an algorithm that uses iteration without using a programming language . LESSON . . Unit 3 Section 8.2 . Unit 3 Section 8.2 - Parav Saliwani . Lesson Objective: Determine the result or side effect of iteration statements . LESSON . . Unit 3 Section 8.3 . Unit 3 Section 8.3 - Nikhil . Lesson Objective: Write iteration statements . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 8.1 . Put Hacks Here . Hacks Unit 3 Section 8.2 . Put Hacks Here . Hacks Unit 3 Section 8.3 . Put Hacks Here . . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section Objectives: . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | . Section Vocabulary: . Traversing Lists: where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) . Essential Knowledge: . List procedures are implemented in accordance with the syntax rules of the programming language . | Iteration Statements can be used to traverse a list . | !!! AP EXAM provides pseudocode for loops | Knowledge of existing algorithms that use iteration can help in constructing new algorithms: | . Unit 3 Section 10 . Unit 3 Section 10 - Luna Iwazaki . . HACKS Unit 3 Section 10 . Find the lowest value in a list . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums[&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/lesson%20plans/2022/11/28/Unit_3.8_3.10.html",
            "relUrl": "/lesson%20plans/2022/11/28/Unit_3.8_3.10.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 3 Sections 8 and 10 HACKS",
            "content": "Unit 3 Section 8 . Section 8 HACKS . Unit 3 Section 8.1 . Unit 3 Section 8.2 . Unit 3 Section 8.3 . Unit 3 Section 10 . Section 10 HACKS .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/unit%203/2022/11/28/Unit_3.8-3.10_HACKS.html",
            "relUrl": "/unit%203/2022/11/28/Unit_3.8-3.10_HACKS.html",
            "date": " • Nov 28, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": ". Unit 4: Algorithmic Programming . Trimester 2 begins with student teaching and a focus on algorithms. Each week a “Student Team” has a teaching assignment supported by College Board materials. Additionally, the Teacher is providing Career Tech mini-labs that correspond to one or more topics for the week. Use the two things together as you improve your learning experience, Frontend blog and Jupyter Notebooks. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 13 | | | | | . 14 | | | | | . 15 | | | | | . 16 | | | | | . . Unit 3: N@tM Project, Web, Systems, and Data . The beginning of Trimester 2 is focussed on Algorithms and Coding. Student need to build their own portfolio. That portfolio should focus on their interests in Python and JavaScript programming. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 8 | | | | | . 9 | | | | | . 10 | | | | | . 11 | | | | | . 12 | | | | | . . Unit 2: Introduction to Web Development . Websites are made up of several key parts: Frontend, Backend, Data and Deployment. The focus for these weeks is to enable students to perform the aspects of constructing and deploying a simple Website. Fastpages got us started on these concepts, but now we will start building a Website from the ground up. Once again, there will be a lot of learning focused tools and getting things working. But, by the end of the Unit, students will be ready to start many of the technical coding aspects of Web Development, having established a Deployed Website. On Nov 3rd our Trimester work will end with a project and student participation in Electives Department “Night at the Museum” (N@tM). . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 4 | | | | | . 5 | | | | | . 6 | | | | | . 7 | | | | | . . Unit 1: Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 0 | | | - Flask/Python Deployment Guide | | . 1 | | | | | . 2 | | | | | . 3 | | | | | .",
          "url": "https://nighthawkcoders.github.io/TeamOrbOrb/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  

  

  
      ,"page3": {
          "title": "",
          "content": "Objectives . Team Orb Orb Fast pages . Blogs .",
          "url": "https://nighthawkcoders.github.io/TeamOrbOrb/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/TeamOrbOrb/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}