{
  
    
        "post0": {
            "title": "Unit 3 Sections 8 and 10 Graded Hacks",
            "content": ". .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/grades/hacks/2023/01/19/Hacks-Grades.html",
            "relUrl": "/grades/hacks/2023/01/19/Hacks-Grades.html",
            "date": " • Jan 19, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Team View and Frontend",
            "content": "Frontend . Homepage . Link to the finished page . HTML - Homepage . View/Homepage Concept . This concept/demo features our homepage, a simplistic and straightforward design that is pleasing to the eyes | On the top right lies our navigation bar, that displays a variety of pages: Home, About, Inventory, Cart, and Search. | At the moment, all but the home are yet to be completed - though we have started work on each of them...we will go through the other pages later on in this blog | . . . CSS - Homepage . . . . About . About - code behind . Email List . Wireframe from canva . . screen shot of the finished page . link to the finished page . code behind the page . . Luna&#39;s Comment . Usually before I start making a new part of the project or website I draft it out in Canva. Doing this process allows me to only think about the code and not the aesthetics of the website while coding. This week I worked on the emailing list/subscription for users to sign up for with their emails. I also formatted the website from last week and added a new part onto the bottom of the site (index). . I also worked on adding the new pages on the website, aka the &#39;about site&#39;. And I also made an &#39;input&#39; part on the site. The input is the email input where users can add in their emails to join the emailing list. . The email&#39;s / inputs won&#39;t accepted unless it contains a &#39;@&#39; or isn&#39;t a valid email won&#39;t be inputted . In the future I am planning to add a table which will use the user inputs and make the combine into a table. We also plan on using an API which will automatically used the emails to send an email to all the emails avalible in the list. . Preloader/Loading screen . The preloader uses a function that displays the given image/gif while the screen loads, using windows.addEventListener for the &quot;load&quot; event. This allows the overall website to be more visually pleasing to users. | This work is strictly in the frontend. | . Load Screen . . Load Screen - Code Behind . HTML . . CSS . . Car Inventory . This code is the Inventory/ catalog. This code displays the different types of cars that we show on our website. There is a hover feature to enable the user to quickly like or view the description of the car. In the future, we will add hyper links to the hover cards to send the user to a full description of the said car. We also have a small “By:” section on the bottom of the card that when clicked, will lead the user to all the cars made by that manufacturer. | As a part of the inventory, our team plans to add a liking/favorite feature as described in our scrum board. In order to save a given user&#39;s likes, it will require communication between both the Front and Backend. The input shall be frontend work, while the data will need to be extracted. We plan to build an API similar to our group&#39;s previous NBA Team Picker API that allowed us to fetch data from our flask website to be able to use for display in the Frontend. | . . Login Screen . Backend . Below is code from the Object Oriented Programming Hacks | This code, though very rough, is a start to what we plan to store as data in the backend | The code consists of getters and setters in order to protect the data for essential car information ie. make, model, year | . import json class Car: def __init__(self, make, model, price, year): # Adding instance attributes self._make = make self._model = model self._price = price self._year = year # Add getters and setters for make, model, price, year @property def make(self): return self._make @make.setter def make(self, make): self._make = make @property def model(self): return self._model @model.setter def model(self, model): self._model = model @property def price(self): return self._price @price.setter def price(self, price): self._price = price @property def year(self): return self._year @year.setter def year(self, year): self._year = year #Calculating Depreciation def calculate_depreciation(self, years): depreciation = 0.9**years * self._price return depreciation @property def dictionary(self): dict = { &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, } return dict def __str__(self): return json.dumps(self.dictionary) if __name__ == &quot;__main__&quot;: car1 = Car(make=&quot;Lexus&quot;, model=&quot;IS 500&quot;, price=&quot;$58,000&quot;, year=&quot;2022&quot;) print(car1) . {&#34;make&#34;: &#34;Lexus&#34;, &#34;model&#34;: &#34;IS 500&#34;, &#34;price&#34;: &#34;$58,000&#34;, &#34;year&#34;: &#34;2022&#34;} .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/project/2023/01/16/View-Frontend.html",
            "relUrl": "/project/2023/01/16/View-Frontend.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statements | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objective: Express an algorithm that uses iteration without using a programming language . LESSON . . Unit 3 Section 8.2 . Unit 3 Section 8.2 - Parav Saliwani . Lesson Objective: Determine the result or side effect of iteration statements . LESSON . . Unit 3 Section 8.3 . Unit 3 Section 8.3 - Nikhil . Lesson Objective: Write iteration statements . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 8.1 . Put Hacks Here . Hacks Unit 3 Section 8.2 . Put Hacks Here . Hacks Unit 3 Section 8.3 . Put Hacks Here . . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section Objectives: . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | . Section Vocabulary: . Traversing Lists: where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) . Essential Knowledge: . List procedures are implemented in accordance with the syntax rules of the programming language . | Iteration Statements can be used to traverse a list . | !!! AP EXAM provides pseudocode for loops | Knowledge of existing algorithms that use iteration can help in constructing new algorithms: | . Unit 3 Section 10 . Unit 3 Section 10 - Luna Iwazaki . . HACKS Unit 3 Section 10 . Find the lowest value in a list . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums[&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/lesson%20plans/2022/11/28/Unit_3.8_3.10.html",
            "relUrl": "/lesson%20plans/2022/11/28/Unit_3.8_3.10.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 3 Sections 8 and 10 HACKS",
            "content": "Unit 3 Section 8 . Section 8 HACKS . Unit 3 Section 8.1 . Unit 3 Section 8.2 . Unit 3 Section 8.3 . Unit 3 Section 10 . Section 10 HACKS .",
            "url": "https://nighthawkcoders.github.io/TeamOrbOrb/unit%203/2022/11/28/Unit_3.8-3.10_HACKS.html",
            "relUrl": "/unit%203/2022/11/28/Unit_3.8-3.10_HACKS.html",
            "date": " • Nov 28, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": ". Unit 4: Algorithmic Programming . Trimester 2 begins with student teaching and a focus on algorithms. Each week a “Student Team” has a teaching assignment supported by College Board materials. Additionally, the Teacher is providing Career Tech mini-labs that correspond to one or more topics for the week. Use the two things together as you improve your learning experience, Frontend blog and Jupyter Notebooks. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 13 | | | | | . 14 | | | | | . 15 | | | | | . 16 | | | | | . . Unit 3: N@tM Project, Web, Systems, and Data . The beginning of Trimester 2 is focussed on Algorithms and Coding. Student need to build their own portfolio. That portfolio should focus on their interests in Python and JavaScript programming. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 8 | | | | | . 9 | | | | | . 10 | | | | | . 11 | | | | | . 12 | | | | | . . Unit 2: Introduction to Web Development . Websites are made up of several key parts: Frontend, Backend, Data and Deployment. The focus for these weeks is to enable students to perform the aspects of constructing and deploying a simple Website. Fastpages got us started on these concepts, but now we will start building a Website from the ground up. Once again, there will be a lot of learning focused tools and getting things working. But, by the end of the Unit, students will be ready to start many of the technical coding aspects of Web Development, having established a Deployed Website. On Nov 3rd our Trimester work will end with a project and student participation in Electives Department “Night at the Museum” (N@tM). . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 4 | | | | | . 5 | | | | | . 6 | | | | | . 7 | | | | | . . Unit 1: Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 0 | | | | | . 1 | | | | | . 2 | | | | | . 3 | | | | | .",
          "url": "https://nighthawkcoders.github.io/TeamOrbOrb/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  

  

  
      ,"page3": {
          "title": "",
          "content": "Objectives . Team Orb Orb Fast pages . Blogs .",
          "url": "https://nighthawkcoders.github.io/TeamOrbOrb/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/TeamOrbOrb/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}